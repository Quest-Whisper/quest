/**
 * Sharing utilities for social media and other platforms
 */

import toast from "react-hot-toast";
import { removeSources, truncateText } from "./messageUtils";

// Social media platform configurations
const SHARE_PLATFORMS = {
  twitter: {
    name: "Twitter",
    color: "bg-blue-400 hover:bg-blue-500",
    getUrl: (text, url) => `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`,
  },
  facebook: {
    name: "Facebook", 
    color: "bg-blue-600 hover:bg-blue-700",
    getUrl: (text, url) => `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`,
  },
  linkedin: {
    name: "LinkedIn",
    color: "bg-blue-800 hover:bg-blue-900", 
    getUrl: (text, url) => `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}&summary=${encodeURIComponent(text)}`,
  },
  whatsapp: {
    name: "WhatsApp",
    color: "bg-green-500 hover:bg-green-600",
    getUrl: (text, url) => `https://wa.me/?text=${encodeURIComponent(text)}`,
  },
  telegram: {
    name: "Telegram",
    color: "bg-blue-500 hover:bg-blue-600",
    getUrl: (text, url) => `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(text)}`,
  },
  reddit: {
    name: "Reddit",
    color: "bg-orange-500 hover:bg-orange-600",
    getUrl: (text, url) => `https://reddit.com/submit?url=${encodeURIComponent(url)}&title=${encodeURIComponent(text)}`,
  },
};

// Format message content for sharing
export function formatMessageForSharing(content, maxLength = 200) {
  const cleanContent = removeSources(content || "");
  const shareText = `Check out this AI response from QuestWhisper:\n\n${truncateText(cleanContent, maxLength)}`;
  return shareText;
}

// Share to social media platform
export function shareToSocialMedia(platform, content, onSuccess) {
  const platformConfig = SHARE_PLATFORMS[platform];
  if (!platformConfig) {
    console.error(`Unknown platform: ${platform}`);
    return;
  }

  const shareText = formatMessageForSharing(content);
  const currentUrl = typeof window !== 'undefined' ? window.location.href : '';
  const shareUrl = platformConfig.getUrl(shareText, currentUrl);

  if (shareUrl) {
    window.open(shareUrl, "_blank", "width=600,height=400");
    if (onSuccess) onSuccess();
    toast.success(`Shared to ${platformConfig.name}!`);
  }
}

// Share via email
export function shareViaEmail(content, onSuccess) {
  const cleanContent = removeSources(content || "");
  const subject = "AI Response from QuestWhisper";
  const body = `I wanted to share this AI response with you:\n\n${cleanContent}\n\nGenerated by QuestWhisper AI`;
  const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  
  window.location.href = mailtoUrl;
  if (onSuccess) onSuccess();
  toast.success("Email client opened!");
}

// Create shareable link
export async function createShareableLink(message, onSuccess, onError) {
  try {
    const shareData = {
      content: removeSources(message.content || ""),
      title: `AI Response - ${new Date(message.timestamp).toLocaleDateString()}`,
      sources: message.sources || [],
      displayImage: message.displayImage || null,
    };

    const response = await fetch("/api/share", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(shareData),
    });

    const result = await response.json();

    if (result.success) {
      await navigator.clipboard.writeText(result.shareUrl);
      if (onSuccess) onSuccess();
      toast.success("Shareable link copied to clipboard!");
    } else {
      throw new Error(result.error || "Failed to create share link");
    }
  } catch (error) {
    console.error("Share error:", error);
    // Fallback to copying content as text
    const shareText = `QuestWhisper AI Response:\n\n${removeSources(message.content || "")}\n\nGenerated at: ${new Date(message.timestamp).toLocaleString()}`;
    await navigator.clipboard.writeText(shareText);
    if (onSuccess) onSuccess();
    toast.success("Content copied to clipboard!");
  }
}

// Download message as text file
export function downloadAsTextFile(message, onSuccess) {
  const cleanContent = removeSources(message.content || "");
  const timestamp = new Date(message.timestamp).toLocaleString();
  const content = `QuestWhisper AI Response\n${"=".repeat(25)}\n\nGenerated: ${timestamp}\n\n${cleanContent}\n\n${
    message.sources?.length
      ? "\nSources:\n" + message.sources.map((s, i) => `${i + 1}. ${s.title} - ${s.url}`).join("\n")
      : ""
  }`;

  const blob = new Blob([content], { type: "text/plain" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `questwhisper-response-${Date.now()}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  if (onSuccess) onSuccess();
  toast.success("Response downloaded as text file!");
}

// Copy text to clipboard
export async function copyToClipboard(text, successMessage = "Copied to clipboard!") {
  try {
    await navigator.clipboard.writeText(text);
    toast.success(successMessage, {
      style: {
        background: "#14171A",
        color: "white",
      },
    });
  } catch (error) {
    console.error("Failed to copy to clipboard:", error);
    toast.error("Failed to copy to clipboard");
  }
}

// Get all available share platforms
export function getSharePlatforms() {
  return Object.entries(SHARE_PLATFORMS).map(([key, config]) => ({
    key,
    name: config.name,
    color: config.color,
  }));
}

// Handle image download
export async function downloadImage(imageUrl, prompt, onSuccess) {
  try {
    const link = document.createElement('a');
    link.href = imageUrl;
    const filename = prompt 
      ? `ai-image-${prompt.slice(0, 30).replace(/[^a-z0-9]/gi, '-')}.png`
      : `ai-image-${Date.now()}.png`;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    if (onSuccess) onSuccess();
    toast.success('Image downloaded successfully!');
  } catch (error) {
    console.error('Download error:', error);
    toast.error('Failed to download image');
  }
} 